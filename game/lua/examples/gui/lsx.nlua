local DEPTH = 0

local function Panel(type: string, props: Table)
	local tabs = string.rep("\t", DEPTH)
	local pnl = gui.CreatePanel(type)
	llog("%slocal %s = gui.CreatePanel(%s)", tabs, type, type)

	for k, v in pairs(props) do
		if k:starts_with("On") then
			pnl[k] = v
			llog("%s%s.%s = %s", tabs, type, k, v)
		elseif pnl["Set" .. k] then
			pnl["Set" .. k](pnl, v)
			llog("%s%s:Set%s(%s)", tabs, type, k, v)
		elseif _G.type(pnl[k]) == "function" then
			pnl[k](pnl, v)
			llog("%s%s:%s(%s)", tabs, type, k, v)
		end
	end

	return pnl
end

local function View(props: Table)
	return Panel("base", props)
end

local function Text(props: Table)
	return Panel("text", props)
end

local function Button(props: Table)
	return Panel("button", props)
end

local function TextButton(props: Table)
	return Panel("text_button", props)
end

local base_elements = {
	[View] = View,
	[Text] = Text,
	[Button] = Button,
	[TextButton] = TextButton,
}

do
	local function equal(a, b)
		return a == b
	end

	local function expand_children(children)
		if #children == 1 and list.is_list(children[1]) then return children[1] end

		return children
	end

	local function merge_children_with_props(props, children)
		local new_props = {
			children = children,
		}

		for k, v in pairs(props) do
			new_props[k] = v
		end

		return new_props
	end

	local META = prototype.CreateTemplate("lsx_node", "base")
	runfile("lua/libraries/prototype/parenting_template.lua", META)

	local function Node(render: Function, props: Table, children: List<|string, number, Table|>)
		children = expand_children(children or {})
		local self = META:CreateObject()
		self.props = props
		self.children = children
		self.original_children = children
		self.original_props = props
		self.rerender = render
		self.name = debug.get_name(render)
		self.state_index = 0
		return self
	end

	-- the xml syntax will be transformed to call LSX(render, props, children)
	_G.LSX = Node

	function META:build()
		self.state_index = 0

		if not base_elements[self.rerender] then
			local new_props = merge_children_with_props(self.original_props, self.original_children)
			local res = self.rerender(new_props, self)
			res:build()
			res.parent = self
			self.children = {res}

			for _, child in ipairs(res.children) do
				if type(child) == "table" then
					child:build()
					child.parent = res
				end
			end
		end

		return self
	end

	function META:render(parent)
		if base_elements[self.rerender] then
			prototype.SafeRemove(self.panel)
			self.panel = self.rerender(self.props)
			self.panel:SetParent(parent)
		else
			self.panel = parent
		end

		for _, child in ipairs(self.children) do
			if type(child) == "table" then
				DEPTH = DEPTH + 1
				child:render(self.panel)
				DEPTH = DEPTH - 1
			elseif self.panel then
				local str = self.panel:GetText() .. tostring(child):gsub("%s+", " ")
				self.panel:SetText(str)
				local tabs = string.rep("\t", DEPTH)
				llog("%s%s:SetText(%s)", tabs, self.panel.ClassName, str)
			end
		end
	end

	function META:useState(init)
		self.states = self.states or {}
		self.state_index = self.state_index + 1

		if self.states[self.state_index] == nil then
			self.states[self.state_index] = {
				value = init,
				set = function(new_state)
					if not equal(state, new_state) then
						self.states[self.state_index].value = new_state
						self:build()
						self:render(self.parent.panel)
					end
				end,
			}
		end

		local state = self.states[self.state_index]
		return state.value, state.set
	end

	META:Register()
end

do
	local function Random()
		return <Text SetupLayout={"top"} is_text=1>
			{math.random()}
		</Text>
		
	end

	local function Container(props, node)
		local state, setState = node:useState(0)
		return <View SetupLayout={"center_simple"} Size={Vec2() + 200} Color={Color(0.5, 0.5, 0.5, 1)} is_view=1 from_container={props.is_container}>
			<Button some_state={state} is_button=1 Size={Vec2() + 100 + state} OnPress={function()
				setState(state + 1)
			end}>
				{props.children}
			</Button>
			<Random/>
		</View>
		
	end

	local function App()
		return <Container is_container=1>
			<Text SetupLayout={"top"} is_text=1>
				Hello world {math.random()}
			</Text>
			<Text SetupLayout={"top"} is_text=1>
				Hello world 
			</Text>
			
		</Container>
		
	end

	local base = gui.CreatePanel("base", nil, "lol")
	base:SetSize(window.GetSize() * 0.5)
	base:CenterSimple()
	base:SetResizable(true)
	base:SetDraggable(true)
	base:SetColor(Color(0.1, 0.1, 0.1, 1))
	base:SetName("base")
	base:SetMargin(Rect(0, 0, 0, 0))
	local x = <App/>
	x:build():render(base)
end