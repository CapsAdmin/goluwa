--DISABLE_ANALYSIS
local function LSX(render: Function, props: Table, children: List<|string, number, Table|>)
	if children and #children == 1 and list.is_list(children[1]) then
		children = children[1]
	end

	return {render = render, props = props, children = children}
end

local function Panel(type: string, props: Table)
	local pnl = gui.CreatePanel(type)

	for k, v in pairs(props) do
		if k:starts_with("On") then
			pnl[k] = v
		elseif pnl["Set" .. k] then
			pnl["Set" .. k](pnl, v)
		elseif _G.type(pnl[k]) == "function" then
			pnl[k](pnl, v)
		end
	end

	return pnl
end

local View = function(props: Table)
	return Panel("base", props)
end
local Text = function(props: Table)
	return Panel("text", props)
end
local Button = function(props: Table)
	return Panel("button", props)
end
local base_elements = {
	[View] = View,
	[Text] = Text,
	[Button] = Button,
}

local function build(node)
	if node.render and not base_elements[node.render] then
		node.props.children = node.children
		local new_node = node.render(node.props)
		node.props = new_node.props
		node.render = new_node.render
		node.children = new_node.children
	elseif node.children then
		for k, v in pairs(node.children) do
			build(v)
		end
	end

	return node
end

local function render(node, parent)
	local pnl

	if type(node) == "table" and node.render then
		pnl = node.render(node.props)
	else
		pnl = Text({})
		parent:SetText(parent:GetText() .. node:gsub("%s+", " "))
	end

	pnl:SetParent(parent)

	if node.children then
		for _, child in ipairs(node.children) do
			render(child, pnl)
		end
	end
end

local function Container(props)
	return <View Size={Vec2() + 200} Color={Color(0, 0, 0, 1)}>
		<Button Size={Vec2() + 100} OnPress={function()
			print("press!")
		end}>
			{props.children}
		</Button>
		
	</View>
	
end

print("=====")
local x = <Container>
	<Text SetupLayout={"top"}>
		Hello world 
	</Text>
	<Text SetupLayout={"top"}>
		Hello world 
	</Text>
	
</Container>

local base = gui.CreatePanel("base", nil, "lol")
base:SetSize(Vec2(1700, 1200))
base:CenterSimple()
base:SetResizable(true)
base:SetDraggable(true)
base:SetColor(Color(0.1, 0.1, 0.1, 1))
base:SetName("base")
base:SetMargin(Rect(0, 0, 0, 0))
x = build(x)
table.print(x)
render(x, base)