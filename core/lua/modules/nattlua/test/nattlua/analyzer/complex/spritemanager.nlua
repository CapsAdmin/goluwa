-- https://github.com/Jacbo1/Public-Starfall/tree/main/Sprite%20Sheet%20Manager
-- some starfall types
type Material = {}
Material.@Name = "Material"
type Material.__index = Material
type Material.setTextureURL = function=(
	Material,
	"$basetexture",
	string,
	nil | function=(any, any, number, number)>(),
	nil | function=()>()
)>()
type material = {}
type material.create = function=("UnlitGeneric" | "VertexLitGeneric")>(Material)
type math.round = function=(number)>(number)
type hook = {}
type hook.add = function=(string, string, function=()>())>()
type render = {}
type render.setMaterial = function=(Material)>()
type render.drawTexturedRectUV = function=(number, number, number, number, number, number, number, number)>()
type timer = {}
type timer.systime = function=()>(number)
--@name Sprite sheet Manager
--@author Jacbo
local mngr = {}
mngr.__index = mngr
type mngr.@Self = {
	@Name = "Sprite",
	loading = boolean,
	rows = number,
	columns = number,
	mats = List<|Material|>,
	loadings = List<|boolean|>,
	cb = nil | function=(self)>(),
	width = nil | number,
	height = nil | number,
	swidth = nil | number,
	sheight = nil | number,
}
local type Sprite = mngr.@Self

-- Creates a sprite sheet manager and loads the image
function mngr.loadURL(
	url: string,
	columns: number,
	rows: number,
	callback: nil | function=(Sprite)>()
)
	local mat = material.create("UnlitGeneric")
	local t: Sprite = {
		loading = true,
		rows = rows,
		columns = columns,
		mats = {mat},
		loadings = {true},
		cb = callback,
	}
	setmetatable(t, mngr)

	mat:setTextureURL(
		"$basetexture",
		url,
		function(_, _, width, height)
			t.width = width
			t.height = height
			t.swidth = width / columns
			t.sheight = height / rows
		end,
		function()
			t.loadings[1] = false

			for _, loading in ipairs(t.loadings) do
				if loading then return end
			end

			t.loading = false

			if t.cb then t.cb(t) end
		end
	)

	return t
end

-- Gets the width of a sprite
function mngr:getSpriteWidth()
	return self.swidth
end

-- Gets the height of a sprite
function mngr:getSpriteHeight()
	return self.sheight
end

-- Sets a callback to run when it finishes loading all sprite sheet images
-- Instantly calls it if it is already loaded
function mngr:setCallback(callback: function=(Sprite)>())
	self.cb = callback

	if not self.loading then callback(self) end
end

-- Appends another piece of the sprite sheet
function mngr:appendURL(url: string)
	local mat = material.create("UnlitGeneric")
	table.insert(self.mats, mat)
	table.insert(self.loadings, true)
	self.loading = true
	local index = #self.loadings

	mat:setTextureURL(
		"$basetexture",
		url,
		nil,
		function()
			self.loadings[index] = false

			for _, loading in ipairs(self.loadings) do
				if loading then return end
			end

			self.loading = false
			local cb = self.cb

			if cb then cb(self) end
		end
	)
end

-- Draws a sprite in a rectangle
function mngr:drawSprite(x: number, y: number, width: number, height: number, index: number)
	if not self.loading then
		index = math.round(index)
		local cols, rows, swidth, sheight = self.columns, self.rows, self.swidth  as number, self.sheight  as number -- indexing self.swidth and self.sheight might return nil
		local sprites = cols * rows
		render.setMaterial(self.mats[math.ceil(index / sprites)] as Material) -- indexing self.mats might return nil
		index = (index - 1) % sprites + 1
		local u = (((index - 1) % cols)) * swidth
		local v = (math.floor((index - 1) / cols)) * sheight
		render.drawTexturedRectUV(
			x,
			y,
			width,
			height,
			u / 1024,
			v / 1024,
			(u + swidth) / 1024,
			(v + sheight) / 1024
		)
	end
end

-- Checks if it is loading sprite sheet pieces
function mngr:isLoading()
	return self.loading
end

local manager = mngr
local delay = 0.05
local frameCount = 8 ^ 2 * 3
local sprite_sheet = manager.loadURL(
	"https://cdn.discordapp.com/attachments/607371740540305424/871456722873618442/1.png",
	8,
	8
)
sprite_sheet:appendURL(
	"https://cdn.discordapp.com/attachments/607371740540305424/871456756759404584/2.png"
)
sprite_sheet:appendURL(
	"https://cdn.discordapp.com/attachments/607371740540305424/871456772580335737/3.png"
)

sprite_sheet:setCallback(function()
	hook.add("render", "", function()
		sprite_sheet:drawSprite(0, 0, 512, 512, math.floor(timer.systime() / delay) % frameCount + 1)
	end)
end)
