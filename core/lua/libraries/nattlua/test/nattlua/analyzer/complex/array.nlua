local META = {}
META.__index = META

function META:at(index: ref number)
	if index < 1 then index = #self.data - index end

	return self.data[index]
end

function META:concat(separator: ref (nil | string))
	return table.concat(self.data, separator)
end

function META:every() end

function META:fill(value: ref any, start: ref (nil | number), stop: ref (nil | number))
	attest.equal<|Widen<|value|>, Widen<|self.data[1]|>, 3|>
	start = start or 1
	stop = stop or #self.data

	for i = start, stop do
		self.data[i] = value
	end
end

function META:copy()
	local copy = self:new()

	for i = 1, #self.data do
		copy.data[i] = self.data[i]
	end

	return copy
end

function META:new()
	return setmetatable({data = {}}, META)
end

function META:filter(
	callback: ref function=(item: ref any, index: ref number, array: ref {[number] = any})>(ref boolean)
)
	local copy = self:new()

	for i = 1, #self.data do
		if callback(self.data[i], i, self.data) then
			table.insert(copy.data, self.data[i])
		end
	end

	return copy
end

local function Array<|T: any, Size: number|>(init: nil | {[Size] = T})
	return setmetatable({data = init or {} as {[Size] = T}}, META)
end

local function StaticArray(init: ref {[number] = any})
	return setmetatable({data = init}, META)
end

do
	local arr = Array<|string, 1 .. 10|>({"hello", "world"})
	attest.equal<|arr:at(-9), string|>
	attest.equal<|arr:at(3), string|>
	attest.expect_diagnostic<|"error", "not a subset of"|>
	arr:at(-20)
	attest.equal<|arr:concat(" "), string|>
end

do
	local arr = StaticArray({"h", "e", "y"})
	attest.equal(arr:at(1), "h")
	attest.equal(arr:copy(), arr)
	attest.equal(arr:concat("|"), "h|e|y")
	arr:fill("a")
	attest.equal(arr:concat("|"), "a|a|a")
	attest.expect_diagnostic<|"error", "expected string got number"|>
	arr:fill(1)
	-- TODO: don't fill with 1 on error above?
	local arr = StaticArray({"h", "e", "i"})
	local new = arr:filter(function(item, i, arr)
		return item ~= "e"
	end)
	--attest.equal(new:concat(), "hi")
	attest.equal(arr:concat(), "hei")
end