--ยง require("jit.p").start("jp=Fpa", "-")
--ยง _G.LOL = false
local b = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" -- You will need this for encoding/decoding
-- encoding
local function enc(data: ref string)
	return (
			(
				data:gsub(".", function(x: ref string): ref string
					local r, b = "", x:byte()

					if not b then return r end

					for i = 8, 1, -1 do
						r = r .. (b % 2 ^ i - b % 2 ^ (i - 1) > 0 and "1" or "0")
					end

					return r
				end) .. "0000"
			):gsub("%d%d%d?%d?%d?%d?", function(x: ref string): ref string
				if (#x < 6) then return "" end

				local c = 0

				for i = 1, 6 do
					c = c + (x:sub(i, i) == "1" and 2 ^ (6 - i) or 0)
				end

				return b:sub(c + 1, c + 1)
			end) .. (
				{"", "==", "="}
			)[#data % 3 + 1]
		)
end

-- decoding
local function dec(data: ref string)
	data = string.gsub(data, "[^" .. b .. "=]", "")
	return (
		data:gsub(".", function(x: ref string): ref string
			if (x == "=") then return "" end

			local pos = b:find(x)

			if not pos then return "" end

			local r, f = "", (pos - 1)

			for i = 6, 1, -1 do
				r = r .. (f % 2 ^ i - f % 2 ^ (i - 1) > 0 and "1" or "0")
			end

			return r
		end):gsub("%d%d%d?%d?%d?%d?%d?%d?", function(x: ref string): ref string
			if (#x ~= 8) then return "" end

			local c = 0

			for i = 1, 8 do
				c = c + (x:sub(i, i) == "1" and 2 ^ (8 - i) or 0)
			end

			return string.char(c)
		end)
	)
end

local b64 = enc("hello world")
local txt = dec(b64)
attest.equal(txt, "hello world")
